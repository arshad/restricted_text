<?php

// $Id$

/**
 * @file
 * restricted_text is a text filter that hides text
 * from users without specified roles
 */

/**
 * implementation of hook_help()
 */
function restricted_text_help($section) {
    switch ($section) {
        case 'admin/modules#description':
            return t('A text filter that allows you to hide text from users based on role.');
            break;
        case 'admin/help#restricted_text':
            return t('Allows you to hide text from users based on their roles.');
            break;
    }
}

/**
 * implementation of hook_filter_tips()
 */
function restricted_text_filter_tips($delta, $format, $long = false) {
    if ($long) {
        return t('Restrict text by wrapping in [restrict:roles=&lt;comma separated roles&gt;] and [/restrict].  If you just use [restrict] and [/restrict], it will default to allowing any authenticated user (but not any anonymous users) access.');
    }
    else {
        return t('Restrict text by wrapping in [restrict:roles=&lt;comma separated roles&gt;] and [/restrict]');
    }
}

/**
 * implementation of hook_filter()
 */
function restricted_text_filter($op, $delta = 0, $format = -1, $text = '') {
    
    switch ($op) {
        case 'no cache':
            return false;

        case 'list':
            return array(0 => t('Restrict text'));
            
        case 'description':
            return t('Allows authors to hide data depending on the roles of the viewing user');
            
        case 'process':
            $text = preg_replace_callback('/\[restrict(:roles=[^\]]+)?\](.+?)\[\/restrict\]/sm', "_restricted_text_replace_callback", $text);
            return $text;
        
        default:
            return $text;
    }
}

/**
 * this callback determines what will be shown based on the roles passed
 */
function _restricted_text_replace_callback($matches) {
    global $user;
    
    list($roles_text, $text) = array($matches[1], $matches[2]);
    if (is_null($roles_text) or ($roles_text == '')) {
        $roles_text = ':roles=authenticated user';
    }
    
    $roles = array();
    if (substr($roles_text, 0, 7) == ':roles=') {
        $roles = explode(",", substr($roles_text, 7));
    }
    
    $allowed = false;
    foreach ($roles as $r) {
        if (in_array($r, $user->roles)) {
            $allowed = true;
            break;
        }
    }
    
    if ($allowed) {
        return $text;
    }
    else {
        return '';
    }
}

?>
